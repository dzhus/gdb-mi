-*-org-*-

#+TAGS: fix(f) redesign(r) new(n) ui(u) needinfo(i) 

## f for bugs, r for parts which need refactoring, n for new features

* Being DRY
** DONE Derive buffers mode from one generic mode                  :redesign:
   CLOSED: [2009-07-05 Вск 22:13]

** DONE Write `gdb-def-frame-for-buffer`
   To define `gdb-frame-*-buffer` functions
  
** DONE Write `gdb-def-display-buffer`
   CLOSED: [2009-06-21 Вск 18:33]
   To define `gdb-display-*-buffer` functions

* Broken glass
** DONE gdb-display-locals-buffer
   CLOSED: [2009-06-21 Вск 17:51]
   Undefined
** DONE gdb-many-windows
   Broken
   
* Object approach
** Rewrite existing buffers
*** DONE Frames list handler
    Ditch `gdb-stack-list-frames-regexp`, hack
    `gdb-stack-list-frames-handler` and `gdb-frame-handler`.
*** DONE Abandon fadr
    CLOSED: [2009-06-27 Сбт]
    Use `bindat-get-field` instead.
*** DONE Breakpoints
    CLOSED: [2009-06-28 Вск 00:44]
    Rewrite `gdb-break-list-handler` using `gdb-get-field`. Introduce
    new variable `gdb-break-list` with all breakpoints data to avoid
    reparsing breakpoints buffer every time we need to add breakpoint
    icons on fringes etc.
* New buffers
** DONE [3/3] Threads
   CLOSED: [2009-07-03 Птн 21:20]
   - [X] basic information
   - [X] keymap
   - [X] current thread selection
** IN PROGRESS Disassembly
   - [X] basic information
         
         `-data-disassemble` command needs filename and line
         information, which can be learned from GDB with
         `-stack-info-frame` command. The code currently relies on
         *global* variables `gdb-selected-file` and
         `gdb-selected-line`, both set in `gdb-frame-handler`.
         See also [[Stack information handling]].

   - [X] alignment

   - [X] breakpoints

   - [X] overlay arrow

   - [ ] disassemble function around point, not just the current one

         To achieve this, I'll need to extend
         `gdb-disassembly-handler` with optional argument for target
         buffer to put disassembly data in
         
   - [ ] keymap

   - [ ] when the program is not running, disassembly should display
     `main`, not the first function from `gdb-main-file`
         
   - [ ] hyperlinks for jump instructions

         Add clickable buttons for `jmp`, `jl` arguments
   
** IN PROGRESS Program memory                                           :new:
   - [X] basic information
   - [X] keymap
   - [X] header
   - [X] alignment
         
   - [ ] show function name instead of just address
         
         MI does not provide function name in `-data-read-memory`
         output =\ `[[-symbol-info-symbol]]` should allow this, but it's
         not implemented yet.

* GDB+Emacs interface improvements
  
* Overall UI improvements                                                :ui:
** TODO Improve `gdb-jump-to`
   See also `gud-display-line` for implementation ideas
** TODO Headers

* Multiple threads support                                         :redesign:
** IN PROGRESS Buffer model review
   Several new concepts for GDB buffers must be introduced:
   
   - [X] buffer-local variable with a number of thread this buffer shows
     information for

   - [ ] same for frame number

   - [X] extend `gdb-get-buffer-create` etc. to allow working with
     buffers of the same type (like frames list) for several threads
     simultaneously

   - [ ] make sure thread selection interface is clear and intuitive

   - [X] include thread information in buffer names to avoid confusion
** DONE Stack information
   CLOSED: [2009-07-04 Сбт 20:25]
   There must be some way to examine stack info for different threads
** DONE [#A] Delete dead subscribers from `gdb-buf-publisher`
   CLOSED: [2009-07-05 Вск 22:13]
   See `kill-buffer-hook`. May be set for all GDB buffers when they're
   all derived from [[generic mode]].
** IN PROGRESS Get frame information for each thread separately
   `-thread-info` command output contains frame information for every
   thread. We should use it to show actual information in buffers
   which need stack information (frames list, disassembly). We use
   `gdb-threads-list` for that.
   
** TODO Frames list buffers
** TODO Locals buffers
   - [ ] include frame in mode name
** TODO Disassembly buffers
   - [ ] include frame in mode name 
   - [ ] fix breakpoints showing lag
* IN PROGRESS [#A] Stack information handling                      :redesign:
  `gdb-frame-handler` is not robust. Must think of how should gdb-mi
  act when we stop in a routine w/o line info. Currently we simply
  don't reset `gud-last-frame` in this case. Disassembly buffer falls
  back to displaying `main` as `gdb-selected-file` gets nil.

  When line information for top frame is unavailable, it's reasonable
  to make gdb-mi obey the highest of frames which have line:

  For example:

  2 in start_thread of /lib/libpthread.so.0
  1 in hello of hello.c:8 <-- we should display this frame
  0 in printf of /lib/libc.so.6

  The same applies to disassembly buffer.

* Black corners
  Unclear parts of code which I don't fully understand yet.
** gud-last-frame
** gdb-pending-triggers
** Why call ignored `list` command in `gdb-place-breakpoints`?

* Cleaning the code
  Some functions and concepts need review and possibly rewrite.

** TODO gdb-place-breakpoints
* GDB
** TODO Send `-symbol-info-symbol` patch
   [[file:~/projects/gdb-trunk/symbol-info-symbol.diff]]
** TODO Write `-stack-list-locals-and-args`
** TODO Add current frame data to `-stack
