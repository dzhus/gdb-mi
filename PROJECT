-*-org-*-

#+TAGS: fix(f) redesign(r) new(n) ui(u) needinfo(i) 

## f for bugs, r for parts which need refactoring, n for new features

* Being DRY
** TODO Derive buffers mode from one generic mode                  :redesign:
   There's too much copy&paste in code for modes of various GDB
   buffers.

** DONE Write `gdb-def-frame-for-buffer`
   To define `gdb-frame-*-buffer` functions
  
** DONE Write `gdb-def-display-buffer`
   CLOSED: [2009-06-21 Вск 18:33]
   To define `gdb-display-*-buffer` functions
  

** IN PROGRESS Use `gdb-auto-update-handler`/`gdb-auto-updated-buffer` more

** TODO Use `def-gdb-auto-update-handler`
   See also gdb-ui.el for `def-gdb-auto-updated-buffer`
   
* Broken glass
** DONE gdb-display-locals-buffer
   CLOSED: [2009-06-21 Вск 17:51]
   Undefined
** DONE gdb-many-windows
   Broken
   
* Object approach
** Rewrite existing buffers
*** DONE Frames list handler
    Ditch `gdb-stack-list-frames-regexp`, hack
    `gdb-stack-list-frames-handler` and `gdb-frame-handler`.

* New buffers
** IN PROGRESS [1/3] Threads
   - [X] basic information
   - [ ] keymap
   - [ ] current thread selection
** IN PROGRESS Disassembly
   - [X] basic information
         
         `-data-disassemble` command needs filename and line
         information, which can be learned from GDB with
         `-stack-info-frame` command. The code currently relies on
         *global* variables `gdb-selected-file` and
         `gdb-selected-line`, both set in `gdb-frame-handler`.
         See also [[Stack information handling]].

   - [ ] alignment sucks

         Add more tabs after `<function_name+offset>:`?

   - [ ] breakpoints

   - [ ] overlay arrow

   - [ ] do not update disassembly buffer if the current function
         hasn't changed since last operation

   - [ ] disassemble function around point, not just the current one

         To achieve this, I'll need to extend
         `gdb-disassembly-handler` with optional argument for target
         buffer to put disassembly data in
         
   - [ ] keymap
         
   - [ ] hyperlinks for jump instructions

         Add clickable buttons for `jmp`, `jl` arguments
   
** TODO Program memory                                                  :new:
   - [X] basic information
   - [X] keymap
   - [X] header
         
   - [ ] show function name instead of just address
         
         MI does not provide function name in `-data-read-memory` output =\

* GDB+Emacs interface improvements

* Overall UI improvements                                                :ui:
** TODO Improve `gdb-jump-to`
   See also `gud-display-line` for implementation ideas
** TODO Headers

* Multiple threads support                                         :redesign:
** TODO Buffer model review
   Several new concepts for GDB buffers must be introduced:
   
   - [ ] buffer-local variable with a number of thread this buffer shows
     information for

   - [ ] same for frame number

   - [ ] extend `gdb-get-buffer-create` etc. to allow working with
     buffers of the same type (like frames list) for several threads
     simultaneously

   - [ ] make sure thread selection interface is clear and intuitive

   - [ ] include thread information in buffer names to avoid confusion
** TODO Stack information
   There must be some way to examine stack info for different threads

* IN PROGRESS Stack information handling                           :redesign:
  `gdb-frame-handler` is not robust. Must think of how should gdb-mi
  act when we stop in a routine w/o line info. Currently we simply
  don't reset `gud-last-frame` in this case. Disassembly buffer falls
  back to displaying `main` as `gdb-selected-file` gets nil.

  When line information for top frame is unavailable, it's reasonable
  to make gdb-mi obey the highest of frames which have line:

  For example:

  2 in start_thread of /lib/libpthread.so.0
  1 in hello of hello.c:8 <-- we should display this frame
  0 in printf of /lib/libc.so.6

  The same applies to disassembly buffer.

* Black corners
  Unclear parts of code which I don't fully understand yet.
** gud-last-frame
** gdb-pending-triggers

